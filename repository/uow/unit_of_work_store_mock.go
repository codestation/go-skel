// Code generated by mockery v2.23.1. DO NOT EDIT.

package uow

import (
	mock "github.com/stretchr/testify/mock"
	repository "megpoid.dev/go/go-skel/repository"
)

// MockUnitOfWorkStore is an autogenerated mock type for the UnitOfWorkStore type
type MockUnitOfWorkStore struct {
	mock.Mock
}

type MockUnitOfWorkStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUnitOfWorkStore) EXPECT() *MockUnitOfWorkStore_Expecter {
	return &MockUnitOfWorkStore_Expecter{mock: &_m.Mock}
}

// Profiles provides a mock function with given fields:
func (_m *MockUnitOfWorkStore) Profiles() repository.ProfileRepo {
	ret := _m.Called()

	var r0 repository.ProfileRepo
	if rf, ok := ret.Get(0).(func() repository.ProfileRepo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.ProfileRepo)
		}
	}

	return r0
}

// MockUnitOfWorkStore_Profiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Profiles'
type MockUnitOfWorkStore_Profiles_Call struct {
	*mock.Call
}

// Profiles is a helper method to define mock.On call
func (_e *MockUnitOfWorkStore_Expecter) Profiles() *MockUnitOfWorkStore_Profiles_Call {
	return &MockUnitOfWorkStore_Profiles_Call{Call: _e.mock.On("Profiles")}
}

func (_c *MockUnitOfWorkStore_Profiles_Call) Run(run func()) *MockUnitOfWorkStore_Profiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUnitOfWorkStore_Profiles_Call) Return(_a0 repository.ProfileRepo) *MockUnitOfWorkStore_Profiles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUnitOfWorkStore_Profiles_Call) RunAndReturn(run func() repository.ProfileRepo) *MockUnitOfWorkStore_Profiles_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockUnitOfWorkStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUnitOfWorkStore creates a new instance of MockUnitOfWorkStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUnitOfWorkStore(t mockConstructorTestingTNewMockUnitOfWorkStore) *MockUnitOfWorkStore {
	mock := &MockUnitOfWorkStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
