---
kind: pipeline
name: default
type: docker

platform:
  os: linux
  arch: arm64

steps:
  - name: lint
    image: golangci/golangci-lint:v1.52.2
    commands:
     - golangci-lint run --no-config -v --timeout 10m ./...

  - name: postgres-healthcheck
    image: postgres:14
    commands:
      - while ! pg_isready -h database -U postgres; do sleep 1; done

  - name: test
    image: golang:1.20
    commands:
      - go install github.com/rubenv/sql-migrate/sql-migrate@v1.3.0
      - sql-migrate up -env production
      - go test -coverprofile cover.out -v ./...
      - go tool cover -func cover.out
    environment:
      APP_DSN: postgres://postgres:secret@database/testdb?sslmode=disable
      GOPROXY:
        from_secret: goproxy_url

  - name: build
    image: ghcr.io/codestation/drone-docker
    settings:
      repo: registry.megpoid.dev/codestation/goapp
      tags: latest
      buildkit: true
      registry: registry.megpoid.dev
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      build_args:
        - CI_COMMIT_TAG=${DRONE_TAG}
      build_args_from_env:
        - goproxy
    environment:
      goproxy:
        from_secret: goproxy_url

    when:
      event:
        - push
        - tag

  - name: update
    image: plugins/webhook
    settings:
      urls: http://updater:8000/apis/swarm/v1/update
      token_value:
        from_secret: updater_apikey
      template: |
        {
          "images": [
            "registry.megpoid.dev/codestation/goapp"
          ]
        }

services:
  - name: database
    image: postgres:14
    environment:
      POSTGRES_DB: testdb
      POSTGRES_PASSWORD: secret
    tmpfs:
      - /var/lib/postgresql/data

trigger:
  branch:
    - master
    - testing
