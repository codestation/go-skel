// Code generated by mockery v2.42.0. DO NOT EDIT.

package usecase

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "go.megpoid.dev/go-skel/app/model"

	request "go.megpoid.dev/go-skel/pkg/request"

	response "go.megpoid.dev/go-skel/pkg/response"
)

// MockProfile is an autogenerated mock type for the Profile type
type MockProfile struct {
	mock.Mock
}

type MockProfile_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProfile) EXPECT() *MockProfile_Expecter {
	return &MockProfile_Expecter{mock: &_m.Mock}
}

// GetProfile provides a mock function with given fields: ctx, id
func (_m *MockProfile) GetProfile(ctx context.Context, id int64) (*model.Profile, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProfile")
	}

	var r0 *model.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.Profile, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Profile); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfile_GetProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfile'
type MockProfile_GetProfile_Call struct {
	*mock.Call
}

// GetProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockProfile_Expecter) GetProfile(ctx interface{}, id interface{}) *MockProfile_GetProfile_Call {
	return &MockProfile_GetProfile_Call{Call: _e.mock.On("GetProfile", ctx, id)}
}

func (_c *MockProfile_GetProfile_Call) Run(run func(ctx context.Context, id int64)) *MockProfile_GetProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockProfile_GetProfile_Call) Return(_a0 *model.Profile, _a1 error) *MockProfile_GetProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfile_GetProfile_Call) RunAndReturn(run func(context.Context, int64) (*model.Profile, error)) *MockProfile_GetProfile_Call {
	_c.Call.Return(run)
	return _c
}

// ListProfiles provides a mock function with given fields: ctx, query
func (_m *MockProfile) ListProfiles(ctx context.Context, query *request.QueryParams) (*response.ListResponse[*model.Profile], error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for ListProfiles")
	}

	var r0 *response.ListResponse[*model.Profile]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.QueryParams) (*response.ListResponse[*model.Profile], error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *request.QueryParams) *response.ListResponse[*model.Profile]); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.ListResponse[*model.Profile])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *request.QueryParams) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfile_ListProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProfiles'
type MockProfile_ListProfiles_Call struct {
	*mock.Call
}

// ListProfiles is a helper method to define mock.On call
//   - ctx context.Context
//   - query *request.QueryParams
func (_e *MockProfile_Expecter) ListProfiles(ctx interface{}, query interface{}) *MockProfile_ListProfiles_Call {
	return &MockProfile_ListProfiles_Call{Call: _e.mock.On("ListProfiles", ctx, query)}
}

func (_c *MockProfile_ListProfiles_Call) Run(run func(ctx context.Context, query *request.QueryParams)) *MockProfile_ListProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*request.QueryParams))
	})
	return _c
}

func (_c *MockProfile_ListProfiles_Call) Return(_a0 *response.ListResponse[*model.Profile], _a1 error) *MockProfile_ListProfiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfile_ListProfiles_Call) RunAndReturn(run func(context.Context, *request.QueryParams) (*response.ListResponse[*model.Profile], error)) *MockProfile_ListProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveProfile provides a mock function with given fields: ctx, id
func (_m *MockProfile) RemoveProfile(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProfile_RemoveProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProfile'
type MockProfile_RemoveProfile_Call struct {
	*mock.Call
}

// RemoveProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockProfile_Expecter) RemoveProfile(ctx interface{}, id interface{}) *MockProfile_RemoveProfile_Call {
	return &MockProfile_RemoveProfile_Call{Call: _e.mock.On("RemoveProfile", ctx, id)}
}

func (_c *MockProfile_RemoveProfile_Call) Run(run func(ctx context.Context, id int64)) *MockProfile_RemoveProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockProfile_RemoveProfile_Call) Return(_a0 error) *MockProfile_RemoveProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProfile_RemoveProfile_Call) RunAndReturn(run func(context.Context, int64) error) *MockProfile_RemoveProfile_Call {
	_c.Call.Return(run)
	return _c
}

// SaveProfile provides a mock function with given fields: ctx, req
func (_m *MockProfile) SaveProfile(ctx context.Context, req *model.ProfileRequest) (*model.Profile, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SaveProfile")
	}

	var r0 *model.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ProfileRequest) (*model.Profile, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.ProfileRequest) *model.Profile); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.ProfileRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfile_SaveProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveProfile'
type MockProfile_SaveProfile_Call struct {
	*mock.Call
}

// SaveProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - req *model.ProfileRequest
func (_e *MockProfile_Expecter) SaveProfile(ctx interface{}, req interface{}) *MockProfile_SaveProfile_Call {
	return &MockProfile_SaveProfile_Call{Call: _e.mock.On("SaveProfile", ctx, req)}
}

func (_c *MockProfile_SaveProfile_Call) Run(run func(ctx context.Context, req *model.ProfileRequest)) *MockProfile_SaveProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.ProfileRequest))
	})
	return _c
}

func (_c *MockProfile_SaveProfile_Call) Return(_a0 *model.Profile, _a1 error) *MockProfile_SaveProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfile_SaveProfile_Call) RunAndReturn(run func(context.Context, *model.ProfileRequest) (*model.Profile, error)) *MockProfile_SaveProfile_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProfile provides a mock function with given fields: ctx, id, req
func (_m *MockProfile) UpdateProfile(ctx context.Context, id int64, req *model.ProfileRequest) (*model.Profile, error) {
	ret := _m.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 *model.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *model.ProfileRequest) (*model.Profile, error)); ok {
		return rf(ctx, id, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, *model.ProfileRequest) *model.Profile); ok {
		r0 = rf(ctx, id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, *model.ProfileRequest) error); ok {
		r1 = rf(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfile_UpdateProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProfile'
type MockProfile_UpdateProfile_Call struct {
	*mock.Call
}

// UpdateProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - req *model.ProfileRequest
func (_e *MockProfile_Expecter) UpdateProfile(ctx interface{}, id interface{}, req interface{}) *MockProfile_UpdateProfile_Call {
	return &MockProfile_UpdateProfile_Call{Call: _e.mock.On("UpdateProfile", ctx, id, req)}
}

func (_c *MockProfile_UpdateProfile_Call) Run(run func(ctx context.Context, id int64, req *model.ProfileRequest)) *MockProfile_UpdateProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*model.ProfileRequest))
	})
	return _c
}

func (_c *MockProfile_UpdateProfile_Call) Return(_a0 *model.Profile, _a1 error) *MockProfile_UpdateProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfile_UpdateProfile_Call) RunAndReturn(run func(context.Context, int64, *model.ProfileRequest) (*model.Profile, error)) *MockProfile_UpdateProfile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProfile creates a new instance of MockProfile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProfile(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProfile {
	mock := &MockProfile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
