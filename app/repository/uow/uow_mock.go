// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package uow

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"go.megpoid.dev/go-skel/app/repository"
)

// NewMockUnitOfWorkStore creates a new instance of MockUnitOfWorkStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUnitOfWorkStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUnitOfWorkStore {
	mock := &MockUnitOfWorkStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUnitOfWorkStore is an autogenerated mock type for the UnitOfWorkStore type
type MockUnitOfWorkStore struct {
	mock.Mock
}

type MockUnitOfWorkStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUnitOfWorkStore) EXPECT() *MockUnitOfWorkStore_Expecter {
	return &MockUnitOfWorkStore_Expecter{mock: &_m.Mock}
}

// Profiles provides a mock function for the type MockUnitOfWorkStore
func (_mock *MockUnitOfWorkStore) Profiles() repository.ProfileRepo {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Profiles")
	}

	var r0 repository.ProfileRepo
	if returnFunc, ok := ret.Get(0).(func() repository.ProfileRepo); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.ProfileRepo)
		}
	}
	return r0
}

// MockUnitOfWorkStore_Profiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Profiles'
type MockUnitOfWorkStore_Profiles_Call struct {
	*mock.Call
}

// Profiles is a helper method to define mock.On call
func (_e *MockUnitOfWorkStore_Expecter) Profiles() *MockUnitOfWorkStore_Profiles_Call {
	return &MockUnitOfWorkStore_Profiles_Call{Call: _e.mock.On("Profiles")}
}

func (_c *MockUnitOfWorkStore_Profiles_Call) Run(run func()) *MockUnitOfWorkStore_Profiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUnitOfWorkStore_Profiles_Call) Return(profileRepo repository.ProfileRepo) *MockUnitOfWorkStore_Profiles_Call {
	_c.Call.Return(profileRepo)
	return _c
}

func (_c *MockUnitOfWorkStore_Profiles_Call) RunAndReturn(run func() repository.ProfileRepo) *MockUnitOfWorkStore_Profiles_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUnitOfWork creates a new instance of MockUnitOfWork. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUnitOfWork(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUnitOfWork {
	mock := &MockUnitOfWork{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUnitOfWork is an autogenerated mock type for the UnitOfWork type
type MockUnitOfWork struct {
	mock.Mock
}

type MockUnitOfWork_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUnitOfWork) EXPECT() *MockUnitOfWork_Expecter {
	return &MockUnitOfWork_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function for the type MockUnitOfWork
func (_mock *MockUnitOfWork) Begin(ctx context.Context) (UnitOfWork, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 UnitOfWork
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (UnitOfWork, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) UnitOfWork); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(UnitOfWork)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUnitOfWork_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type MockUnitOfWork_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx
func (_e *MockUnitOfWork_Expecter) Begin(ctx interface{}) *MockUnitOfWork_Begin_Call {
	return &MockUnitOfWork_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *MockUnitOfWork_Begin_Call) Run(run func(ctx context.Context)) *MockUnitOfWork_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUnitOfWork_Begin_Call) Return(unitOfWork UnitOfWork, err error) *MockUnitOfWork_Begin_Call {
	_c.Call.Return(unitOfWork, err)
	return _c
}

func (_c *MockUnitOfWork_Begin_Call) RunAndReturn(run func(ctx context.Context) (UnitOfWork, error)) *MockUnitOfWork_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function for the type MockUnitOfWork
func (_mock *MockUnitOfWork) Commit(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUnitOfWork_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockUnitOfWork_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx
func (_e *MockUnitOfWork_Expecter) Commit(ctx interface{}) *MockUnitOfWork_Commit_Call {
	return &MockUnitOfWork_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *MockUnitOfWork_Commit_Call) Run(run func(ctx context.Context)) *MockUnitOfWork_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUnitOfWork_Commit_Call) Return(err error) *MockUnitOfWork_Commit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUnitOfWork_Commit_Call) RunAndReturn(run func(ctx context.Context) error) *MockUnitOfWork_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Do provides a mock function for the type MockUnitOfWork
func (_mock *MockUnitOfWork) Do(ctx context.Context, fn UnitOfWorkBlock) error {
	ret := _mock.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, UnitOfWorkBlock) error); ok {
		r0 = returnFunc(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUnitOfWork_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockUnitOfWork_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - ctx
//   - fn
func (_e *MockUnitOfWork_Expecter) Do(ctx interface{}, fn interface{}) *MockUnitOfWork_Do_Call {
	return &MockUnitOfWork_Do_Call{Call: _e.mock.On("Do", ctx, fn)}
}

func (_c *MockUnitOfWork_Do_Call) Run(run func(ctx context.Context, fn UnitOfWorkBlock)) *MockUnitOfWork_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UnitOfWorkBlock))
	})
	return _c
}

func (_c *MockUnitOfWork_Do_Call) Return(err error) *MockUnitOfWork_Do_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUnitOfWork_Do_Call) RunAndReturn(run func(ctx context.Context, fn UnitOfWorkBlock) error) *MockUnitOfWork_Do_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function for the type MockUnitOfWork
func (_mock *MockUnitOfWork) Rollback(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUnitOfWork_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockUnitOfWork_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx
func (_e *MockUnitOfWork_Expecter) Rollback(ctx interface{}) *MockUnitOfWork_Rollback_Call {
	return &MockUnitOfWork_Rollback_Call{Call: _e.mock.On("Rollback", ctx)}
}

func (_c *MockUnitOfWork_Rollback_Call) Run(run func(ctx context.Context)) *MockUnitOfWork_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUnitOfWork_Rollback_Call) Return(err error) *MockUnitOfWork_Rollback_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUnitOfWork_Rollback_Call) RunAndReturn(run func(ctx context.Context) error) *MockUnitOfWork_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function for the type MockUnitOfWork
func (_mock *MockUnitOfWork) Store() UnitOfWorkStore {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 UnitOfWorkStore
	if returnFunc, ok := ret.Get(0).(func() UnitOfWorkStore); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(UnitOfWorkStore)
		}
	}
	return r0
}

// MockUnitOfWork_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockUnitOfWork_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
func (_e *MockUnitOfWork_Expecter) Store() *MockUnitOfWork_Store_Call {
	return &MockUnitOfWork_Store_Call{Call: _e.mock.On("Store")}
}

func (_c *MockUnitOfWork_Store_Call) Run(run func()) *MockUnitOfWork_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUnitOfWork_Store_Call) Return(unitOfWorkStore UnitOfWorkStore) *MockUnitOfWork_Store_Call {
	_c.Call.Return(unitOfWorkStore)
	return _c
}

func (_c *MockUnitOfWork_Store_Call) RunAndReturn(run func() UnitOfWorkStore) *MockUnitOfWork_Store_Call {
	_c.Call.Return(run)
	return _c
}
