// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Pp3NZuj/19v/BgAA//8OeQjvXiwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
