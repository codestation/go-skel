// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"uwJObywfTyYTPEjX638HAAD//6JQ0cGBLgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
