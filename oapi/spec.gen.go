// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9YZPF4sFxv/1/r8BAAD///BWrJ5uLAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
