---
openapi: 3.0.2
info:
  title: Skel API
  description: Skel API - Documentation for the Skel API
  version: 1.0.0
servers:
  - # noinspection HttpUrlsUsage
    url: 'http://{host}:{port}/apis/goapp/v1'
    description: Development server
    variables:
      host:
        default: localhost
      port:
        default: '8000'
security:
  - BearerAuth: []
paths:
  "/health/live":
    get:
      summary: Check if the app is started
      description: Check if the app is started and running successfully.
      operationId: liveCheck
      security: []
      parameters:
        - $ref: "#/components/parameters/verbose"
      responses:
        '200':
          description: The app is running
        default:
          $ref: "#/components/responses/UnexpectedError"
      tags:
        - Status
  "/health/ready":
    get:
      summary: Check if the app is ready to accept connections
      description: Check if the app has completed initialization and is ready to accept connections.
      operationId: readyCheck
      security: []
      parameters:
        - $ref: "#/components/parameters/verbose"
      responses:
        '200':
          description: The app is ready
        default:
          $ref: "#/components/responses/UnexpectedError"
      tags:
        - Status
  "/auth/login":
    post:
      security: []
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
      tags:
        - Authentication
  "/profiles":
    get:
      parameters:
        # Cursor pagination
        - $ref: "#/components/parameters/before"
        - $ref: "#/components/parameters/after"
        # Offset pagination
        - $ref: "#/components/parameters/page"
        # Filtering parameters
        - $ref: "#/components/parameters/query"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/includes"
        - $ref: "#/components/parameters/filters"
        # Not implemented yet
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/sort"
      summary: Retrieve a list of profiles
      operationId: listProfiles
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileList"
        default:
          $ref: "#/components/responses/UnexpectedError"
      tags:
        - Profile
    post:
      summary: Create a new profile
      operationId: saveProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfileRequest"
      responses:
        '201':
          description: Profile created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        default:
          $ref: "#/components/responses/UnexpectedError"
      tags:
        - Profile
  "/profiles/{id}":
    parameters:
      - $ref: "#/components/parameters/profileId"
    get:
      summary: Get a profile by ID
      operationId: getProfile
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        default:
          $ref: "#/components/responses/UnexpectedError"
      tags:
        - Profile
    patch:
      summary: Update a profile by ID
      operationId: updateProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfileRequest"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        default:
          $ref: "#/components/responses/UnexpectedError"
      tags:
        - Profile
    delete:
      summary: Delete a profile by ID
      operationId: removeProfile
      responses:
        '204':
          description: Profile deleted successfully
        default:
          $ref: "#/components/responses/UnexpectedError"
      tags:
        - Profile
components:
  schemas:
    AuthRequest:
      type: object
      properties:
        username:
          type: string
          description: The username of the user.
          example: john
          x-oapi-codegen-extra-tags:
            validate: 'required'
        password:
          type: string
          format: password
          description: The password of the user.
          example: password123
          x-oapi-codegen-extra-tags:
            validate: 'required'
      required:
        - username
        - password
    ProfileList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Profile"
        pagination:
          $ref: "#/components/schemas/Pagination"
      required:
        - items
        - pagination
    ProfileRequest:
      type: object
      properties:
        first_name:
          type: string
          description: The first name of the profile owner.
          example: John
        last_name:
          type: string
          description: The last name of the profile owner.
          example: Doe
        email:
          type: string
          description: The email address of the profile owner.
          example: john.doe@example.com
      required:
        - first_name
        - last_name
        - email
    Token:
      type: object
      properties:
        token:
          type: string
          description: The JWT token for authentication.
      required:
        - token
    Model:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier of the model.
          example: 1
          x-go-name: ID
        created_at:
          type: string
          description: The creation timestamp of the model.
        updated_at:
          type: string
          description: The last update timestamp of the model.
      required:
        - id
        - created_at
        - updated_at
    Profile:
      allOf:
        - $ref: "#/components/schemas/Model"
        - $ref: "#/components/schemas/ProfileRequest"
    Pagination:
      oneOf:
        - $ref: "#/components/schemas/PaginationCursor"
        - $ref: "#/components/schemas/PaginationPage"
    PaginationType:
      discriminator:
        propertyName: type
        mapping:
          cursor: "#/components/schemas/PaginationCursor"
          page: "#/components/schemas/PaginationPage"
      type: object
      properties:
        type:
          type: string
          example: cursor
      required:
        - type
    PaginationCursor:
      allOf:
        - $ref: "#/components/schemas/PaginationType"
        - type: object
          properties:
            next_cursor:
              type: string
              description: The cursor for the next page of results.
            prev_cursor:
              type: string
              description: The cursor for the previous page of results.
          required:
            - next_cursor
            - prev_cursor
    PaginationPage:
      allOf:
        - $ref: "#/components/schemas/PaginationType"
        - type: object
          properties:
            current_page:
              type: integer
              description: The current page number.
            max_page:
              type: integer
              description: The maximum page number.
            total_records:
              type: integer
              description: The total number of records.
            records_per_page:
              type: integer
              description: The number of records per page.
          required:
            - current_page
            - max_page
            - total_records
            - records_per_page
    Error:
      type: object
      properties:
        message:
          type: string
          description: The error message.
        location:
          type: string
          description: The location of the error.
        detailed_error:
          type: string
          description: The detailed error description.
        status_code:
          type: string
          description: The status code of the error.
      required:
        - message
        - status_code
  parameters:
    verbose:
      name: verbose
      in: query
      description: Flag to enable verbose response.
      schema:
        type: boolean
        example: true
    profileId:
      name: id
      in: path
      description: The ID of the profile.
      schema:
        type: integer
        format: int64
        example: 1
      required: true
    limit:
      name: limit
      in: query
      description: The maximum number of items to return.
      schema:
        type: integer
        example: 10
    after:
      name: after
      in: query
      description: The cursor for retrieving the next page.
      schema:
        type: string
    before:
      name: before
      in: query
      description: The cursor for retrieving the previous page.
      schema:
        type: string
    page:
      name: page
      in: query
      description: The page number to retrieve.
      schema:
        type: integer
        example: 1
    includes:
      name: includes
      in: query
      description: Additional relationships to include.
      schema:
        type: array
        items:
          type: string
          example: profiles
    query:
      name: q
      in: query
      description: The default query parameter.
      schema:
        type: string
        example: john@example.com
    fields:
      name: fields
      in: query
      description: Comma-separated list of fields to return in the response. Not implemented yet.
      schema:
        type: string
        example: id,name
    sort:
      name: sort
      in: query
      description: Comma-separated list of fields to specify the sort order. Use + or - as a prefix. Not implemented yet.
      schema:
        type: string
        example: +name,-id
    filters:
      name: filters
      in: query
      description: Additional filters for querying.
      schema:
        type: object
        additionalProperties:
          type: string
  responses:
    UnexpectedError:
      description: An unexpected error occurred.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
