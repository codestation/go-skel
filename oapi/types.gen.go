// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package oapi

import (
	"encoding/json"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	// Password Password
	Password string `json:"password"`

	// Username Username
	Username string `json:"username"`
}

// Error defines model for Error.
type Error struct {
	DetailedError *string `json:"detailed_error,omitempty"`
	Location      *string `json:"location,omitempty"`
	Message       string  `json:"message"`
	StatusCode    string  `json:"status_code"`
}

// Model defines model for Model.
type Model struct {
	CreatedAt  string `json:"created_at"`
	ExternalId string `json:"external_id"`
	Id         int    `json:"id"`
	UpdatedAt  string `json:"updated_at"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	union json.RawMessage
}

// PaginationCursor defines model for PaginationCursor.
type PaginationCursor struct {
	NextCursor string `json:"next_cursor"`
	PrevCursor string `json:"prev_cursor"`
	Type       string `json:"type"`
}

// PaginationPage defines model for PaginationPage.
type PaginationPage struct {
	CurrentPage    int    `json:"current_page"`
	MaxPage        int    `json:"max_page"`
	RecordsPerPage int    `json:"records_per_page"`
	TotalRecords   int    `json:"total_records"`
	Type           string `json:"type"`
}

// PaginationType defines model for PaginationType.
type PaginationType struct {
	Type string `json:"type"`
}

// Profile defines model for Profile.
type Profile struct {
	CreatedAt  string `json:"created_at"`
	Email      string `json:"email"`
	ExternalId string `json:"external_id"`
	FirstName  string `json:"first_name"`
	Id         int    `json:"id"`
	LastName   string `json:"last_name"`
	UpdatedAt  string `json:"updated_at"`
}

// ProfileList defines model for ProfileList.
type ProfileList struct {
	Items      *Profile    `json:"items,omitempty"`
	Pagination *Pagination `json:"pagination,omitempty"`
}

// ProfileRequest defines model for ProfileRequest.
type ProfileRequest struct {
	Email     string `json:"email"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

// Token defines model for Token.
type Token struct {
	// Token JWT token
	Token string `json:"token"`
}

// After defines model for after.
type After = string

// Before defines model for before.
type Before = string

// Fields defines model for fields.
type Fields = string

// Filters defines model for filters.
type Filters map[string]string

// Includes defines model for includes.
type Includes = []string

// Limit defines model for limit.
type Limit = int

// Page defines model for page.
type Page = int

// ProfileId defines model for profileId.
type ProfileId = int64

// Query defines model for query.
type Query = string

// Sort defines model for sort.
type Sort = string

// Verbose defines model for verbose.
type Verbose = bool

// UnexpectedError defines model for UnexpectedError.
type UnexpectedError = Error

// LiveCheckParams defines parameters for LiveCheck.
type LiveCheckParams struct {
	// Verbose Give a verbose response
	Verbose *Verbose `form:"verbose,omitempty" json:"verbose,omitempty"`
}

// ReadyCheckParams defines parameters for ReadyCheck.
type ReadyCheckParams struct {
	// Verbose Give a verbose response
	Verbose *Verbose `form:"verbose,omitempty" json:"verbose,omitempty"`
}

// ListProfilesParams defines parameters for ListProfiles.
type ListProfilesParams struct {
	// Before Cursor for the previous page
	Before *Before `form:"before,omitempty" json:"before,omitempty"`

	// After Cursor for the next page
	After *After `form:"after,omitempty" json:"after,omitempty"`

	// Page Page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Q Default query parameter
	Q *Query `form:"q,omitempty" json:"q,omitempty"`

	// Limit Max items to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Includes Additional relationships
	Includes *Includes `form:"includes,omitempty" json:"includes,omitempty"`

	// Filters Additional filters
	Filters *Filters `form:"filters,omitempty" json:"filters,omitempty"`

	// Fields Comma-separated list of fields to only return in the response. Not implemented
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Sort Comma-separated list of fields to provide a sort order. Use + or - as a prefix. Not implemented
	Sort *Sort `form:"sort,omitempty" json:"sort,omitempty"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = AuthRequest

// SaveProfileJSONRequestBody defines body for SaveProfile for application/json ContentType.
type SaveProfileJSONRequestBody = ProfileRequest

// UpdateProfileJSONRequestBody defines body for UpdateProfile for application/json ContentType.
type UpdateProfileJSONRequestBody = ProfileRequest

// AsPaginationCursor returns the union data inside the Pagination as a PaginationCursor
func (t Pagination) AsPaginationCursor() (PaginationCursor, error) {
	var body PaginationCursor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaginationCursor overwrites any union data inside the Pagination as the provided PaginationCursor
func (t *Pagination) FromPaginationCursor(v PaginationCursor) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaginationCursor performs a merge with any union data inside the Pagination, using the provided PaginationCursor
func (t *Pagination) MergePaginationCursor(v PaginationCursor) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaginationPage returns the union data inside the Pagination as a PaginationPage
func (t Pagination) AsPaginationPage() (PaginationPage, error) {
	var body PaginationPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaginationPage overwrites any union data inside the Pagination as the provided PaginationPage
func (t *Pagination) FromPaginationPage(v PaginationPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaginationPage performs a merge with any union data inside the Pagination, using the provided PaginationPage
func (t *Pagination) MergePaginationPage(v PaginationPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Pagination) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Pagination) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
