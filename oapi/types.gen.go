// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

const (
	ApikeyAuthScopes = "ApikeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
	OAuthScopes      = "OAuth.Scopes"
	OpenIDScopes     = "OpenID.Scopes"
)

// Defines values for TaskState.
const (
	Failed    TaskState = "failed"
	Pending   TaskState = "pending"
	Retry     TaskState = "retry"
	Running   TaskState = "running"
	Succeeded TaskState = "succeeded"
)

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	// Password The password of the user.
	Password string `json:"password" validate:"required"`

	// Username The username of the user.
	Username string `json:"username" validate:"required"`
}

// DelayRequest defines model for DelayRequest.
type DelayRequest struct {
	// Delay Delay duration
	Delay string `json:"delay"`
}

// Error defines model for Error.
type Error struct {
	// DetailedError The detailed error description.
	DetailedError *string `json:"detailed_error,omitempty"`

	// Location The location of the error.
	Location *string `json:"location,omitempty"`

	// Message The error message.
	Message string `json:"message"`

	// StatusCode The status code of the error.
	StatusCode string `json:"status_code"`
}

// Model defines model for Model.
type Model struct {
	// CreatedAt The creation timestamp of the model.
	CreatedAt string `json:"created_at"`

	// ID The unique identifier of the model.
	ID int64 `json:"id"`

	// UpdatedAt The last update timestamp of the model.
	UpdatedAt string `json:"updated_at"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	union json.RawMessage
}

// PaginationCursor defines model for PaginationCursor.
type PaginationCursor struct {
	// NextCursor The cursor for the next page of results.
	NextCursor string `json:"next_cursor"`

	// PrevCursor The cursor for the previous page of results.
	PrevCursor string `json:"prev_cursor"`
	Type       string `json:"type"`
}

// PaginationPage defines model for PaginationPage.
type PaginationPage struct {
	// CurrentPage The current page number.
	CurrentPage int `json:"current_page"`

	// MaxPage The maximum page number.
	MaxPage int `json:"max_page"`

	// RecordsPerPage The number of records per page.
	RecordsPerPage int `json:"records_per_page"`

	// TotalRecords The total number of records.
	TotalRecords int    `json:"total_records"`
	Type         string `json:"type"`
}

// PaginationType defines model for PaginationType.
type PaginationType struct {
	Type string `json:"type"`
}

// Profile defines model for Profile.
type Profile struct {
	// CreatedAt The creation timestamp of the model.
	CreatedAt string `json:"created_at"`

	// Email The email address of the profile owner.
	Email string `json:"email"`

	// FirstName The first name of the profile owner.
	FirstName string `json:"first_name"`

	// ID The unique identifier of the model.
	ID int64 `json:"id"`

	// LastName The last name of the profile owner.
	LastName string `json:"last_name"`

	// UpdatedAt The last update timestamp of the model.
	UpdatedAt string `json:"updated_at"`
}

// ProfileList defines model for ProfileList.
type ProfileList struct {
	Items      []Profile  `json:"items"`
	Pagination Pagination `json:"pagination"`
}

// ProfileRequest defines model for ProfileRequest.
type ProfileRequest struct {
	// Email The email address of the profile owner.
	Email string `json:"email"`

	// FirstName The first name of the profile owner.
	FirstName string `json:"first_name"`

	// LastName The last name of the profile owner.
	LastName string `json:"last_name"`
}

// Task defines model for Task.
type Task struct {
	Error *struct {
		Code    string                  `json:"code"`
		Details *map[string]interface{} `json:"details,omitempty"`
		Message string                  `json:"message"`
	} `json:"error,omitempty"`

	// State Task status
	State TaskState `json:"state"`

	// TaskId Task identifier
	TaskId string `json:"task_id"`
}

// TaskState Task status
type TaskState string

// TaskCreationResponse defines model for TaskCreationResponse.
type TaskCreationResponse struct {
	// Location URL to check for task updates
	Location string `json:"location"`

	// TaskId Task identifier
	TaskId string `json:"task_id"`
}

// Token defines model for Token.
type Token struct {
	// Token The JWT token for authentication.
	Token string `json:"token"`
}

// After defines model for after.
type After = string

// Before defines model for before.
type Before = string

// Fields defines model for fields.
type Fields = string

// Filters defines model for filters.
type Filters map[string]string

// Includes defines model for includes.
type Includes = []string

// Limit defines model for limit.
type Limit = int

// Page defines model for page.
type Page = int

// ProfileId defines model for profileId.
type ProfileId = int64

// Query defines model for query.
type Query = string

// QueueName defines model for queueName.
type QueueName = string

// Sort defines model for sort.
type Sort = string

// TaskId defines model for taskId.
type TaskId = string

// Verbose defines model for verbose.
type Verbose = bool

// UnexpectedError defines model for UnexpectedError.
type UnexpectedError = Error

// LiveCheckParams defines parameters for LiveCheck.
type LiveCheckParams struct {
	// Verbose Flag to enable verbose response.
	Verbose *Verbose `form:"verbose,omitempty" json:"verbose,omitempty"`
}

// ReadyCheckParams defines parameters for ReadyCheck.
type ReadyCheckParams struct {
	// Verbose Flag to enable verbose response.
	Verbose *Verbose `form:"verbose,omitempty" json:"verbose,omitempty"`
}

// ListProfilesParams defines parameters for ListProfiles.
type ListProfilesParams struct {
	// Before The cursor for retrieving the previous page.
	Before *Before `form:"before,omitempty" json:"before,omitempty"`

	// After The cursor for retrieving the next page.
	After *After `form:"after,omitempty" json:"after,omitempty"`

	// Page The page number to retrieve.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Q The default query parameter.
	Q *Query `form:"q,omitempty" json:"q,omitempty"`

	// Limit The maximum number of items to return.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Includes Additional relationships to include.
	Includes *Includes `form:"includes,omitempty" json:"includes,omitempty"`

	// Filters Additional filters for querying.
	Filters *Filters `form:"filters,omitempty" json:"filters,omitempty"`

	// Fields Comma-separated list of fields to return in the response. Not implemented yet.
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Sort Comma-separated list of fields to specify the sort order. Use + or - as a prefix. Not implemented yet.
	Sort *Sort `form:"sort,omitempty" json:"sort,omitempty"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = AuthRequest

// ProcessBackgroundJSONRequestBody defines body for ProcessBackground for application/json ContentType.
type ProcessBackgroundJSONRequestBody = DelayRequest

// SaveProfileJSONRequestBody defines body for SaveProfile for application/json ContentType.
type SaveProfileJSONRequestBody = ProfileRequest

// UpdateProfileJSONRequestBody defines body for UpdateProfile for application/json ContentType.
type UpdateProfileJSONRequestBody = ProfileRequest

// AsPaginationCursor returns the union data inside the Pagination as a PaginationCursor
func (t Pagination) AsPaginationCursor() (PaginationCursor, error) {
	var body PaginationCursor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaginationCursor overwrites any union data inside the Pagination as the provided PaginationCursor
func (t *Pagination) FromPaginationCursor(v PaginationCursor) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaginationCursor performs a merge with any union data inside the Pagination, using the provided PaginationCursor
func (t *Pagination) MergePaginationCursor(v PaginationCursor) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaginationPage returns the union data inside the Pagination as a PaginationPage
func (t Pagination) AsPaginationPage() (PaginationPage, error) {
	var body PaginationPage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaginationPage overwrites any union data inside the Pagination as the provided PaginationPage
func (t *Pagination) FromPaginationPage(v PaginationPage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaginationPage performs a merge with any union data inside the Pagination, using the provided PaginationPage
func (t *Pagination) MergePaginationPage(v PaginationPage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Pagination) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Pagination) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
