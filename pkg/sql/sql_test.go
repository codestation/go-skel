// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sql

import (
	"context"

	"github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"
)

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// Query provides a mock function for the type MockQuerier
func (_mock *MockQuerier) Query(ctx context.Context, query string, args ...interface{}) (pgx.Rows, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 pgx.Rows
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (pgx.Rows, error)); ok {
		return returnFunc(ctx, query, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) pgx.Rows); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Rows)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = returnFunc(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockQuerier_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx
//   - query
//   - args
func (_e *MockQuerier_Expecter) Query(ctx interface{}, query interface{}, args ...interface{}) *MockQuerier_Query_Call {
	return &MockQuerier_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockQuerier_Query_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *MockQuerier_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]interface{})
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockQuerier_Query_Call) Return(rows pgx.Rows, err error) *MockQuerier_Query_Call {
	_c.Call.Return(rows, err)
	return _c
}

func (_c *MockQuerier_Query_Call) RunAndReturn(run func(ctx context.Context, query string, args ...interface{}) (pgx.Rows, error)) *MockQuerier_Query_Call {
	_c.Call.Return(run)
	return _c
}
